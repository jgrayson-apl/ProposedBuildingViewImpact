 /*async initializeObstructions({view, existingView, proposedView}) {

   const Mesh = await $arcgis.import("esri/geometry/Mesh");
   const Graphic = await $arcgis.import("esri/Graphic");
   const obstructionGraphic = new Graphic({
   symbol: {
   type: "mesh-3d",
   symbolLayers: [
   {
   type: "fill",
   material: {color: "rgba(217,24,62,0.5)"},
   edges: {type: "solid", color: '#ff0000', size: 2.0}
   }
   ]
   }
   });

   const GraphicsLayer = await $arcgis.import("esri/layers/GraphicsLayer");
   const obstructionsLayer = new GraphicsLayer({title: 'Obstructions', graphics: [obstructionGraphic]});
   view.map.add(obstructionsLayer);

   obstructionsLayer.on('layerview-create', (evt) => {
   evt.layerView.visible = (evt.view !== existingView);
   });

   const buildingsLayer = view.map.layers.find(l => l.title === 'Buildings');
   await buildingsLayer.load();
   const buildingsLayerView = await view.whenLayerView(buildingsLayer);

   this.selectBuilding = async ({mapPoint}) => {

   const {extent: buildingExtent} = await buildingsLayerView.queryExtent({geometry: mapPoint});
   if (buildingExtent) {
   const {center, width, height, zmin, zmax} = buildingExtent;

   const location = center.clone();
   location.z = zmin;

   obstructionGraphic.geometry = Mesh.createBox(location, {
   size: {
   width: width,
   depth: height,
   height: (zmax - zmin) * 3.0
   }
   });
   }
   };

   let clickHandle;

   const selectObstructionBtn = document.createElement('calcite-button');
   selectObstructionBtn.innerText = 'Set Proposed Building';
   selectObstructionBtn.setAttribute('icon-start', 'number-circle-1');
   selectObstructionBtn.setAttribute('appearance', 'outline-fill');
   selectObstructionBtn.setAttribute('scale', 'l');
   selectObstructionBtn.toggleAttribute('round', true);
   view.ui.add(selectObstructionBtn, 'top-right');

   selectObstructionBtn.addEventListener('click', () => {
   const active = selectObstructionBtn.toggleAttribute('active');
   selectObstructionBtn.setAttribute('appearance', active ? 'solid' : 'outline-fill');
   view.container.style.cursor = active ? 'pointer' : 'default';
   clickHandle?.remove();
   if (active) {
   clickHandle = reactiveUtils.on(() => view, 'click', clickEvt => {
   this.selectBuilding(clickEvt);
   });
   }
   });

   }*/
